Starting new log file Sat Jul 12 00:43:40 2025

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running yosys for verilog parsing and synthesis
yosys  -s alu.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `alu.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/shamili/shamili_project/rv32i_core/alu/source/alu.v
Parsing Verilog input from `/home/shamili/shamili_project/rv32i_core/alu/source/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \alu

3.1.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1 in module alu.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.
1/1: $1\y[31:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu.\y' from process `\alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.
Removing empty process `alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.
Cleaned up 1 empty switch.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$10_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$11_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$12_CMP0 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
creating $macc model for $add$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:9$2 ($add).
creating $macc model for $sub$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:10$3 ($sub).
creating $alu model for $macc $sub$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:10$3.
creating $alu model for $macc $add$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:9$2.
creating $alu cell for $add$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:9$2: $auto$alumacc.cc:485:replace_alu$14
creating $alu cell for $sub$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:10$3: $auto$alumacc.cc:485:replace_alu$17
created 2 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.
Found cells that share an operand and can be merged by moving the $pmux $procmux$8 in front of them:
$auto$alumacc.cc:485:replace_alu$17
$auto$alumacc.cc:485:replace_alu$14

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
New ctrl vector for $pmux cell $procmux$8: { $auto$opt_reduce.cc:134:opt_pmux$28 $procmux$11_CMP $procmux$10_CMP $procmux$9_CMP }
Optimizing cells in module \alu.
Performed a total of 1 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$b098bc6f249c0ac91c4d6e19d54b23c285914115\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~628 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~264 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 20 unused cells and 277 unused wires.
<suppressed ~21 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 772 gates and 840 wires to a netlist network with 67 inputs and 32 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       10
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:              XNOR cells:       50
ABC RESULTS:               NOR cells:       40
ABC RESULTS:               NOT cells:       45
ABC RESULTS:               MUX cells:       31
ABC RESULTS:              NAND cells:       60
ABC RESULTS:               XOR cells:       75
ABC RESULTS:                OR cells:      124
ABC RESULTS:            ANDNOT cells:      298
ABC RESULTS:        internal signals:      741
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       32
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 278 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \alu

3.24.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

3.25. Printing statistics.

=== alu ===

Number of wires:                716
Number of wire bits:            811
Number of public wires:           4
Number of public wire bits:      99
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                744
$_ANDNOT_                     298
$_AND_                         10
$_MUX_                         31
$_NAND_                        60
$_NOR_                         40
$_NOT_                         45
$_ORNOT_                       11
$_OR_                         124
$_XNOR_                        50
$_XOR_                         75

3.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
final dff cell mappings:
\DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
\DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
unmapped dff cell: $_DFF_NN0_
unmapped dff cell: $_DFF_NN1_
unmapped dff cell: $_DFF_NP0_
unmapped dff cell: $_DFF_NP1_
unmapped dff cell: $_DFF_PN0_
unmapped dff cell: $_DFF_PN1_
unmapped dff cell: $_DFF_PP0_
unmapped dff cell: $_DFF_PP1_
unmapped dff cell: $_DFFSR_NNN_
unmapped dff cell: $_DFFSR_NNP_
unmapped dff cell: $_DFFSR_NPN_
unmapped dff cell: $_DFFSR_NPP_
\DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
unmapped dff cell: $_DFFSR_PNP_
unmapped dff cell: $_DFFSR_PPN_
unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 744 gates and 811 wires to a netlist network with 67 inputs and 32 outputs.

6.1.1. Executing ABC.

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.

LEF Read, Line 141: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project alu
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/shamili/shamili_project/rv32i_core/alu/synthesis/alu.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/shamili/shamili_project/rv32i_core/alu/layout/alu.cel
No alu.cel1 file found for project. . . no partial blockages to apply to layout.
No alu.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  alu
Running getfillcell to determine cell to use for fill.
getfillcell.tcl alu  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl alu FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 5.0 150.0 PG alu  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  alu
Reading info file alu.info. . .
Reading DEF file alu.def. . .
Recalculating pin positions
Writing DEF file alu_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/shamili/shamili_project/rv32i_core/alu/synthesis/alu.blif alu.def /home/shamili/shamili_project/rv32i_core/alu/synthesis/alu_anno.blif

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu

Running vesta static timing analysis
vesta --long alu.rtlnopwr.v /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib

----------------------------------------------
Vesta static timing analysis tool
for qflow 1.3.17
(c) 2013-2018 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu035_stdcells"
End of library at line 6636
Parsing module "alu"
Lib read /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib:  Processed 6637 lines.
Verilog netlist read:  Processed 776 lines.
Number of paths analyzed:  0

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running qrouter 1.4.59.T
qrouter -noc  -s alu.cfg

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
*** buffer overflow detected ***: terminated
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Converting qrouter output to vesta delay format
Running rc2dly -r alu.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d alu.dly
Converting qrouter output to SPEF delay format
Abort (core dumped)
Running rc2dly -D : -r alu.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d alu.spef
*** buffer overflow detected ***: terminated
Converting qrouter output to SDF delay format
Abort (core dumped)
Running rc2dly -r alu.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d alu.sdf
*** buffer overflow detected ***: terminated

Abort (core dumped)
Running vesta static timing analysis with back-annotated extracted wire delays
vesta -c -d alu.dly --long alu.rtlnopwr.v /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib

----------------------------------------------
Vesta static timing analysis tool
for qflow 1.3.17
(c) 2013-2018 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu035_stdcells"
End of library at line 6636
Parsing module "alu"
Lib read /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib:  Processed 6637 lines.
ERROR:  Unexpected end-of-file while reading delay file.
Verilog netlist read:  Processed 870 lines.
Number of paths analyzed:  0

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  migrate_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jun 18 12:56:02 PM IST 2025.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "migrate_alu.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:        0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read, Line 107 (Warning): Cut size for magic type "metal1" (4 x 4) does not match LEF/DEF
LEF read, Line 107 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 116 (Warning): Cut size for magic type "metal2" (4 x 4) does not match LEF/DEF
LEF read, Line 116 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 125 (Warning): Cut size for magic type "metal3" (4 x 4) does not match LEF/DEF
LEF read, Line 125 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 143 (Warning): Cut size for magic type "(null)" (4 x 4) does not match LEF/DEF
LEF read, Line 143 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 159 (Warning): Cut size for magic type "(null)" (4 x 4) does not match LEF/DEF
LEF read, Line 159 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 175 (Warning): Cut size for magic type "(null)" (4 x 4) does not match LEF/DEF
LEF read, Line 175 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read: Processed 3179 lines.
LEF Read: encountered 12 warnings total.
Reading DEF data from file alu.def.
This action cannot be undone.
LEF read, Line 20 (Warning): Cut size for magic type "metal1" (4 x 4) does not match LEF/DEF
LEF read, Line 20 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 21 (Warning): Cut size for magic type "m2contact" (4 x 4) does not match LEF/DEF
LEF read, Line 21 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 22 (Warning): Cut size for magic type "m2contact" (4 x 4) does not match LEF/DEF
LEF read, Line 22 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 26 (Warning): Cut size for magic type "metal3" (4 x 4) does not match LEF/DEF
LEF read, Line 26 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 27 (Warning): Cut size for magic type "m3contact" (4 x 4) does not match LEF/DEF
LEF read, Line 27 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 28 (Warning): Cut size for magic type "m3contact" (4 x 4) does not match LEF/DEF
LEF read, Line 28 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 32 (Warning): Cut size for magic type "metal3" (4 x 4) does not match LEF/DEF
LEF read, Line 32 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 33 (Warning): Cut size for magic type "m4contact" (4 x 4) does not match LEF/DEF
LEF read, Line 33 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 34 (Warning): Cut size for magic type "m4contact" (4 x 4) does not match LEF/DEF
LEF read, Line 34 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
Processed 3 vias total.
Processed 858 subcell instances total.
Processed 101 pins total.
Processed 831 nets total.
DEF read, Line 10744 (Warning): Number of nets read (156) does not match the number declared (158).
DEF read: Processed 10745 lines.
DEF Read: encountered 19 warnings total.
Generating LEF output alu.lef for cell alu:
Diagnostic:  Write LEF header for cell alu
Diagnostic:  Writing LEF output for cell alu
Diagnostic:  Scale value is 0.100000
Extracting OAI22X1 into OAI22X1.ext:
Completed 67%
Completed 100%
Extracting INVX8 into INVX8.ext:
Completed 67%
Completed 100%
Extracting BUFX4 into BUFX4.ext:
Completed 67%
Completed 100%
Extracting OR2X2 into OR2X2.ext:
Completed 67%
Completed 100%
Extracting XNOR2X1 into XNOR2X1.ext:
Completed 33%
Completed 50%
Completed 67%
Completed 83%
Completed 100%
Extracting FILL into FILL.ext:
Completed 67%
Completed 100%
Extracting NAND3X1 into NAND3X1.ext:
Completed 67%
Completed 100%
Extracting XOR2X1 into XOR2X1.ext:
Completed 33%
Completed 50%
Completed 67%
Completed 83%
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 67%
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 67%
Completed 100%
Extracting AOI22X1 into AOI22X1.ext:
Completed 67%
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 67%
Completed 100%
Extracting INVX2 into INVX2.ext:
Completed 67%
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 67%
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 33%
Completed 50%
Completed 67%
Completed 83%
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 67%
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 67%
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 67%
Completed 100%
Extracting alu into alu.ext:
Completed 5%
Completed 10%
Completed 15%
Completed 20%
Completed 25%
Completed 30%
Completed 35%
Completed 41%
Completed 46%
Completed 51%

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  /home/shamili/shamili_project/rv32i_core/alu/layout/run_drc_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jun 18 12:56:02 PM IST 2025.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "/home/shamili/shamili_project/rv32i_core/alu/layout/run_drc_alu.tcl" from command line.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read, Line 107 (Warning): Cut size for magic type "metal1" (4 x 4) does not match LEF/DEF
LEF read, Line 107 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 116 (Warning): Cut size for magic type "metal2" (4 x 4) does not match LEF/DEF
LEF read, Line 116 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 125 (Warning): Cut size for magic type "metal3" (4 x 4) does not match LEF/DEF
LEF read, Line 125 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 143 (Warning): Cut size for magic type "(null)" (4 x 4) does not match LEF/DEF
LEF read, Line 143 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 159 (Warning): Cut size for magic type "(null)" (4 x 4) does not match LEF/DEF
LEF read, Line 159 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read, Line 175 (Warning): Cut size for magic type "(null)" (4 x 4) does not match LEF/DEF
LEF read, Line 175 (Warning): Via cut size (8 x 8).  Magic layer cut size will be used!
LEF read: Processed 3179 lines.
LEF Read: encountered 12 warnings total.
alu: 10000 rects
alu: 20000 rects
alu: 30000 rects
alu: 40000 rects
Processing timestamp mismatches: FILL, NAND3X1, NAND2X1, NOR2X1, AND2X2, INVX1, OAI21X1, BUFX2, NOR3X1, INVX2, AOI22X1, XNOR2X1, AOI21X1, OAI22X1, OR2X2, BUFX4, INVX8, XOR2X1.

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  /home/shamili/shamili_project/rv32i_core/alu/layout/generate_gds_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jun 18 12:56:02 PM IST 2025.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "/home/shamili/shamili_project/rv32i_core/alu/layout/generate_gds_alu.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:        0 x 0       (     0,  0    ), (     0,  0    )
Warning: Calma reading is not undoable!  I hope that's OK.
Library written using GDS-II Release 3.0
Library name: iit_stdcells
Reading "FILL".
Moving label "vdd" from space to metal1 in cell FILL.
Moving label "gnd" from space to metal1 in cell FILL.
Reading "AND2X1".
Moving label "Y" from space to metal1 in cell AND2X1.
Moving label "B" from space to metal1 in cell AND2X1.
Moving label "vdd" from space to metal1 in cell AND2X1.
Moving label "gnd" from space to metal1 in cell AND2X1.
Moving label "A" from space to metal1 in cell AND2X1.
Reading "AND2X2".
Moving label "vdd" from space to metal1 in cell AND2X2.
Moving label "gnd" from space to metal1 in cell AND2X2.
Moving label "A" from space to metal1 in cell AND2X2.
Moving label "B" from space to metal1 in cell AND2X2.
Moving label "Y" from space to metal1 in cell AND2X2.
Reading "AOI21X1".
Moving label "gnd" from space to metal1 in cell AOI21X1.
Moving label "vdd" from space to metal1 in cell AOI21X1.
Moving label "A" from space to metal1 in cell AOI21X1.
Moving label "B" from space to metal1 in cell AOI21X1.
Moving label "Y" from space to metal1 in cell AOI21X1.
Moving label "C" from space to metal1 in cell AOI21X1.
Reading "AOI22X1".
Moving label "gnd" from space to metal1 in cell AOI22X1.
Moving label "vdd" from space to metal1 in cell AOI22X1.
Moving label "C" from space to metal1 in cell AOI22X1.
Moving label "D" from space to metal1 in cell AOI22X1.
Moving label "Y" from space to metal1 in cell AOI22X1.
Moving label "A" from space to metal1 in cell AOI22X1.
Moving label "B" from space to metal1 in cell AOI22X1.
Reading "BUFX2".
Moving label "vdd" from space to metal1 in cell BUFX2.
Moving label "gnd" from space to metal1 in cell BUFX2.
Moving label "A" from space to metal1 in cell BUFX2.
Moving label "Y" from space to metal1 in cell BUFX2.
Reading "BUFX4".
Moving label "vdd" from space to metal1 in cell BUFX4.
Moving label "gnd" from space to metal1 in cell BUFX4.
Moving label "A" from space to metal1 in cell BUFX4.
Moving label "Y" from space to metal1 in cell BUFX4.
Reading "DFFNEGX1".
Moving label "CLK" from space to metal1 in cell DFFNEGX1.
Moving label "vdd" from space to metal1 in cell DFFNEGX1.
Moving label "D" from space to metal1 in cell DFFNEGX1.
Moving label "gnd" from space to metal1 in cell DFFNEGX1.
Moving label "Q" from space to metal1 in cell DFFNEGX1.
Reading "NOR3X1".
Moving label "vdd" from space to metal1 in cell NOR3X1.
Moving label "gnd" from space to metal1 in cell NOR3X1.
Moving label "B" from space to metal1 in cell NOR3X1.
Moving label "C" from space to metal1 in cell NOR3X1.
Moving label "A" from space to metal1 in cell NOR3X1.
Moving label "Y" from space to metal1 in cell NOR3X1.
Reading "DFFPOSX1".
Moving label "vdd" from space to metal1 in cell DFFPOSX1.
Moving label "D" from space to metal1 in cell DFFPOSX1.
Moving label "gnd" from space to metal1 in cell DFFPOSX1.
Moving label "Q" from space to metal1 in cell DFFPOSX1.
Moving label "CLK" from space to metal1 in cell DFFPOSX1.
Reading "FAX1".
Moving label "gnd" from space to metal1 in cell FAX1.
Moving label "vdd" from space to metal1 in cell FAX1.
Moving label "A" from space to metal1 in cell FAX1.
Moving label "B" from space to metal1 in cell FAX1.
Moving label "C" from space to metal1 in cell FAX1.
Moving label "YC" from space to metal1 in cell FAX1.
Moving label "YS" from space to metal1 in cell FAX1.
Reading "HAX1".
Moving label "vdd" from space to metal1 in cell HAX1.
Moving label "gnd" from space to metal1 in cell HAX1.
Moving label "YC" from space to metal1 in cell HAX1.
Moving label "A" from space to metal1 in cell HAX1.
Moving label "B" from space to metal1 in cell HAX1.
Moving label "YS" from space to metal1 in cell HAX1.
Reading "INVX1".
Moving label "A" from space to metal1 in cell INVX1.
Moving label "Y" from space to metal1 in cell INVX1.
Moving label "vdd" from space to metal1 in cell INVX1.
Moving label "gnd" from space to metal1 in cell INVX1.
Reading "INVX2".
Moving label "vdd" from space to metal1 in cell INVX2.
Moving label "gnd" from space to metal1 in cell INVX2.
Moving label "Y" from space to metal1 in cell INVX2.
Moving label "A" from space to metal1 in cell INVX2.
Reading "INVX4".
Moving label "vdd" from space to metal1 in cell INVX4.
Moving label "gnd" from space to metal1 in cell INVX4.
Moving label "Y" from space to metal1 in cell INVX4.
Moving label "A" from space to metal1 in cell INVX4.
Reading "INVX8".
Moving label "vdd" from space to metal1 in cell INVX8.
Moving label "gnd" from space to metal1 in cell INVX8.
Moving label "A" from space to metal1 in cell INVX8.
Moving label "Y" from space to metal1 in cell INVX8.
Reading "NAND2X1".
Moving label "vdd" from space to metal1 in cell NAND2X1.
Moving label "Y" from space to metal1 in cell NAND2X1.
Moving label "gnd" from space to metal1 in cell NAND2X1.
Moving label "A" from space to metal1 in cell NAND2X1.
Moving label "B" from space to metal1 in cell NAND2X1.
Reading "NAND3X1".
Moving label "B" from space to metal1 in cell NAND3X1.
Moving label "vdd" from space to metal1 in cell NAND3X1.
Moving label "gnd" from space to metal1 in cell NAND3X1.
Moving label "A" from space to metal1 in cell NAND3X1.
Moving label "C" from space to metal1 in cell NAND3X1.
Moving label "Y" from space to metal1 in cell NAND3X1.
Reading "NOR2X1".
Moving label "vdd" from space to metal1 in cell NOR2X1.
Moving label "B" from space to metal1 in cell NOR2X1.
Moving label "gnd" from space to metal1 in cell NOR2X1.
Moving label "Y" from space to metal1 in cell NOR2X1.
Moving label "A" from space to metal1 in cell NOR2X1.
Reading "OAI21X1".
Moving label "gnd" from space to metal1 in cell OAI21X1.
Moving label "vdd" from space to metal1 in cell OAI21X1.
Moving label "A" from space to metal1 in cell OAI21X1.
Moving label "B" from space to metal1 in cell OAI21X1.
Moving label "Y" from space to metal1 in cell OAI21X1.
Moving label "C" from space to metal1 in cell OAI21X1.
Reading "OAI22X1".
Moving label "gnd" from space to metal1 in cell OAI22X1.
Moving label "vdd" from space to metal1 in cell OAI22X1.
Moving label "D" from space to metal1 in cell OAI22X1.
Moving label "C" from space to metal1 in cell OAI22X1.
Moving label "A" from space to metal1 in cell OAI22X1.
Moving label "B" from space to metal1 in cell OAI22X1.
Moving label "Y" from space to metal1 in cell OAI22X1.
Reading "OR2X1".
Moving label "Y" from space to metal1 in cell OR2X1.
Moving label "B" from space to metal1 in cell OR2X1.
Moving label "vdd" from space to metal1 in cell OR2X1.
Moving label "gnd" from space to metal1 in cell OR2X1.
Moving label "A" from space to metal1 in cell OR2X1.
Reading "OR2X2".
Moving label "Y" from space to metal1 in cell OR2X2.
Moving label "B" from space to metal1 in cell OR2X2.
Moving label "vdd" from space to metal1 in cell OR2X2.
Moving label "gnd" from space to metal1 in cell OR2X2.
Moving label "A" from space to metal1 in cell OR2X2.
Reading "TBUFX1".
Moving label "vdd" from space to metal1 in cell TBUFX1.
Moving label "gnd" from space to metal1 in cell TBUFX1.
Moving label "EN" from space to metal1 in cell TBUFX1.
Moving label "A" from space to metal1 in cell TBUFX1.
Moving label "Y" from space to metal1 in cell TBUFX1.
Reading "TBUFX2".
Moving label "vdd" from space to metal1 in cell TBUFX2.
Moving label "gnd" from space to metal1 in cell TBUFX2.
Moving label "A" from space to metal1 in cell TBUFX2.
Moving label "EN" from space to metal1 in cell TBUFX2.
Moving label "Y" from space to metal1 in cell TBUFX2.
Reading "XOR2X1".
Moving label "Y" from space to metal1 in cell XOR2X1.
Moving label "vdd" from space to metal1 in cell XOR2X1.
Moving label "B" from space to metal1 in cell XOR2X1.
Moving label "A" from space to metal1 in cell XOR2X1.
Moving label "gnd" from space to metal1 in cell XOR2X1.
Reading "MUX2X1".
Moving label "S" from space to metal1 in cell MUX2X1.
Moving label "vdd" from space to metal1 in cell MUX2X1.
Moving label "gnd" from space to metal1 in cell MUX2X1.
Moving label "Y" from space to metal1 in cell MUX2X1.
Moving label "A" from space to metal1 in cell MUX2X1.
Moving label "B" from space to metal1 in cell MUX2X1.
Reading "XNOR2X1".
Moving label "A" from space to metal1 in cell XNOR2X1.
Moving label "B" from space to metal1 in cell XNOR2X1.
Moving label "gnd" from space to metal1 in cell XNOR2X1.
Moving label "vdd" from space to metal1 in cell XNOR2X1.
Moving label "Y" from space to metal1 in cell XNOR2X1.
Reading "LATCH".
Moving label "D" from space to metal1 in cell LATCH.
Moving label "Q" from space to metal1 in cell LATCH.
Moving label "gnd" from space to metal1 in cell LATCH.
Moving label "vdd" from space to metal1 in cell LATCH.
Moving label "CLK" from space to metal1 in cell LATCH.
Reading "DFFSR".
Moving label "gnd" from space to metal1 in cell DFFSR.
Moving label "vdd" from space to metal1 in cell DFFSR.
Moving label "D" from space to metal1 in cell DFFSR.
Moving label "S" from space to metal1 in cell DFFSR.
Moving label "R" from space to metal1 in cell DFFSR.
Moving label "Q" from space to metal1 in cell DFFSR.
Moving label "CLK" from space to metal1 in cell DFFSR.
Reading "CLKBUF1".
Moving label "A" from space to metal1 in cell CLKBUF1.
Moving label "vdd" from space to metal1 in cell CLKBUF1.
Moving label "gnd" from space to metal1 in cell CLKBUF1.
Moving label "Y" from space to metal1 in cell CLKBUF1.
Reading "CLKBUF2".
Moving label "vdd" from space to metal1 in cell CLKBUF2.
Moving label "gnd" from space to metal1 in cell CLKBUF2.
Moving label "A" from space to metal1 in cell CLKBUF2.
Moving label "Y" from space to metal1 in cell CLKBUF2.
Reading "CLKBUF3".
Moving label "gnd" from space to metal1 in cell CLKBUF3.
Moving label "vdd" from space to metal1 in cell CLKBUF3.
Moving label "A" from space to metal1 in cell CLKBUF3.
Moving label "Y" from space to metal1 in cell CLKBUF3.
Reading "iit_stdcells".
alu: 10000 rects
alu: 20000 rects
alu: 30000 rects
alu: 40000 rects
Processing timestamp mismatches: FILL, NAND3X1, NAND2X1, NOR2X1, AND2X2, INVX1, OAI21X1, BUFX2, NOR3X1, INVX2, AOI22X1, XNOR2X1, AOI21X1, OAI22X1, OR2X2, BUFX4, INVX8, XOR2X1.

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu050 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running yosys for verilog parsing and synthesis
yosys  -s alu.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `alu.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu050/osu05_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/shamili/shamili_project/rv32i_core/alu/source/alu.v
Parsing Verilog input from `/home/shamili/shamili_project/rv32i_core/alu/source/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \alu

3.1.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1 in module alu.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.
1/1: $1\y[31:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu.\y' from process `\alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.
Removing empty process `alu.$proc$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:7$1'.
Cleaned up 1 empty switch.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$10_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$11_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$12_CMP0 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
creating $macc model for $add$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:9$2 ($add).
creating $macc model for $sub$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:10$3 ($sub).
creating $alu model for $macc $sub$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:10$3.
creating $alu model for $macc $add$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:9$2.
creating $alu cell for $add$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:9$2: $auto$alumacc.cc:485:replace_alu$14
creating $alu cell for $sub$/home/shamili/shamili_project/rv32i_core/alu/source/alu.v:10$3: $auto$alumacc.cc:485:replace_alu$17
created 2 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.
Found cells that share an operand and can be merged by moving the $pmux $procmux$8 in front of them:
$auto$alumacc.cc:485:replace_alu$17
$auto$alumacc.cc:485:replace_alu$14

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
New ctrl vector for $pmux cell $procmux$8: { $auto$opt_reduce.cc:134:opt_pmux$28 $procmux$11_CMP $procmux$10_CMP $procmux$9_CMP }
Optimizing cells in module \alu.
Performed a total of 1 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

/usr/local/share/qflow/scripts/spi2xspice.py:32: SyntaxWarning: invalid escape sequence '\*'
3.19.23. Executing OPT_DFF pass (perform DFF optimizations).
increx = re.compile('^[^\*]*[ \t]*.include[ \t]+([^ \t]+).*$', re.IGNORECASE)

/usr/local/share/qflow/scripts/spi2xspice.py:33: SyntaxWarning: invalid escape sequence '\*'
3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
subrex  = re.compile('^[^\*]*[ \t]*.subckt[ \t]+([^ \t]+)(.*)$', re.IGNORECASE)
Finding unused cells or wires in module \alu..
/usr/local/share/qflow/scripts/spi2xspice.py:34: SyntaxWarning: invalid escape sequence '\*'

endsrex = re.compile('^[^\*]*[ \t]*.ends.*$', re.IGNORECASE)
3.19.25. Executing OPT_EXPR pass (perform const folding).
/usr/local/share/qflow/scripts/spi2xspice.py:35: SyntaxWarning: invalid escape sequence '\*'
Optimizing module alu.
comrex  = re.compile('^[\*]+.*$', re.IGNORECASE)

/usr/local/share/qflow/scripts/spi2xspice.py:96: SyntaxWarning: invalid escape sequence '\)'
3.19.26. Finished OPT passes. (There is nothing left to do.)
imprex = re.compile('([10\)])[ \t]+([10\(])')

/usr/local/share/qflow/scripts/spi2xspice.py:97: SyntaxWarning: invalid escape sequence '\)'
3.20. Executing TECHMAP pass (map to technology primitives).
primerex = re.compile('([10\)])[ \t]*\'')

/usr/local/share/qflow/scripts/spi2xspice.py:143: SyntaxWarning: invalid escape sequence '\g'
3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
psubs = imprex.sub('\g<1>&\g<2>', psubs)
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
/usr/local/share/qflow/scripts/spi2xspice.py:208: SyntaxWarning: invalid escape sequence '\*'
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
increx = re.compile('^[^\*]*[ \t]*.include[ \t]+([^ \t]+).*$', re.IGNORECASE)
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
/usr/local/share/qflow/scripts/spi2xspice.py:209: SyntaxWarning: invalid escape sequence '\*'
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
subrex = re.compile('^[^\*]*[ \t]*.subckt[ \t]+([^ \t]+)(.*)$', re.IGNORECASE)
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
/usr/local/share/qflow/scripts/spi2xspice.py:211: SyntaxWarning: invalid escape sequence '\*'
Generating RTLIL representation for module `\_90_simplemap_various'.
comrex = re.compile('^[\*]+.*$', re.IGNORECASE)
Generating RTLIL representation for module `\_90_simplemap_registers'.
/usr/local/share/qflow/scripts/spi2xspice.py:212: SyntaxWarning: invalid escape sequence '\*'
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
specrex = re.compile('^[\*]+This file may contain array delimiters', re.IGNORECASE)
Generating RTLIL representation for module `\_90_shift_shiftx'.
/usr/local/share/qflow/scripts/spi2xspice.py:213: SyntaxWarning: invalid escape sequence '\*'
Generating RTLIL representation for module `\_90_fa'.
endsrex = re.compile('^[^\*]*[ \t]*.ends.*$', re.IGNORECASE)
Generating RTLIL representation for module `\_90_lcu'.
/usr/local/share/qflow/scripts/spi2xspice.py:214: SyntaxWarning: invalid escape sequence '\*'
Generating RTLIL representation for module `\_90_alu'.
endrex = re.compile('^[^\*]*[ \t]*.end.*$', re.IGNORECASE)
Generating RTLIL representation for module `\_90_macc'.
/usr/local/share/qflow/scripts/spi2xspice.py:664: SyntaxWarning: invalid escape sequence '\('
Generating RTLIL representation for module `\_90_alumacc'.
outparenrex = re.compile('^[ \t]*\([ \t]*(.+)[ \t]*\)[ \t]*$')
Generating RTLIL representation for module `\$__div_mod_u'.
/usr/local/share/qflow/scripts/spi2xspice.py:665: SyntaxWarning: invalid escape sequence '\('
Generating RTLIL representation for module `\$__div_mod_trunc'.
parenrex = re.compile('\([ \t]*([^ \t\)|&~^]+)[ \t]*\)')
Generating RTLIL representation for module `\_90_div'.
/usr/local/share/qflow/scripts/spi2xspice.py:668: SyntaxWarning: invalid escape sequence '\g'
Generating RTLIL representation for module `\_90_mod'.
pstring = outparenrex.sub('\g<1>', pstring)
Generating RTLIL representation for module `\$__div_mod_floor'.
/usr/local/share/qflow/scripts/spi2xspice.py:669: SyntaxWarning: invalid escape sequence '\g'
Generating RTLIL representation for module `\_90_divfloor'.
pstring = parenrex.sub('\g<1>', pstring)
Generating RTLIL representation for module `\_90_modfloor'.
/usr/local/share/qflow/scripts/spi2xspice.py:670: SyntaxWarning: invalid escape sequence '\g'
Generating RTLIL representation for module `\_90_pow'.
pstring = primerex.sub('~\g<1>', pstring)
Generating RTLIL representation for module `\_90_pmux'.
/usr/local/share/qflow/scripts/spi2xspice.py:678: SyntaxWarning: invalid escape sequence '\('
Generating RTLIL representation for module `\_90_demux'.
cellrex  = re.compile('[ \t]*cell[ \t]*\(([^)]+)\)')
Generating RTLIL representation for module `\_90_lut'.
/usr/local/share/qflow/scripts/spi2xspice.py:679: SyntaxWarning: invalid escape sequence '\('
Successfully finished Verilog frontend.
pinrex   = re.compile('[ \t]*pin[ \t]*\(([^)]+)\)')

/usr/local/share/qflow/scripts/spi2xspice.py:680: SyntaxWarning: invalid escape sequence '\('
3.20.2. Continuing TECHMAP pass.
busrex   = re.compile('[ \t]*bus[ \t]*\(([^)]+)\)')
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
/usr/local/share/qflow/scripts/spi2xspice.py:681: SyntaxWarning: invalid escape sequence '\('
Using extmapper simplemap for cells of type $reduce_or.
lat1rex  = re.compile('[ \t]*latch[ \t]*\(([^)]+)\)')
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
/usr/local/share/qflow/scripts/spi2xspice.py:682: SyntaxWarning: invalid escape sequence '\('
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
lat2rex  = re.compile('[ \t]*latch[ \t]*\(([^, \t]+)[ \t]*,[ \t]*([^),]+)\)')
Using extmapper simplemap for cells of type $and.
/usr/local/share/qflow/scripts/spi2xspice.py:683: SyntaxWarning: invalid escape sequence '\('
Using extmapper simplemap for cells of type $or.
ff1rex   = re.compile('[ \t]*ff[ \t]*\(([^)]+)\)')
Using extmapper simplemap for cells of type $xor.
/usr/local/share/qflow/scripts/spi2xspice.py:684: SyntaxWarning: invalid escape sequence '\('
Using extmapper simplemap for cells of type $eq.
ff2rex   = re.compile('[ \t]*ff[ \t]*\(([^, \t]+)[ \t]*,[ \t]*([^),]+)\)')
Using template $paramod$b098bc6f249c0ac91c4d6e19d54b23c285914115\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~628 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).


cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
LEF Read, Line 115: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 116: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 120: NOTE:  Old format VIARULE ignored.

LEF Read, Line 121: NOTE:  Old format VIARULE ignored.
Technology set to osu050 from existing qflow_vars.sh file
LEF Read, Line 131: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project alu
LEF Read, Line 132: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef.
LEF Read, Line 137: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF file:  Defines site IO (ignored)
LEF file:  Defines site core (ignored)
LEF read: Processed 3221 lines.
LEF Read: encountered 0 errors and 8 warnings total.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/shamili/shamili_project/rv32i_core/alu/synthesis/alu.blif  --lef  /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef --cel /home/shamili/shamili_project/rv32i_core/alu/layout/alu.cel
No alu.cel1 file found for project. . . no partial blockages to apply to layout.
No alu.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  alu
Running getfillcell to determine cell to use for fill.
getfillcell.tcl alu  /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl alu FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 8.0 225.0 PG alu  /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  alu
Reading info file alu.info. . .
Reading DEF file alu.def. . .
Recalculating pin positions
Writing DEF file alu_mod.def. . .
Done with arrangepins.tcl

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu050 from existing qflow_vars.sh file
Regenerating files for existing project alu

Running vesta static timing analysis
vesta --long alu.rtlnopwr.v /usr/local/share/qflow/tech/osu050/osu05_stdcells.lib

----------------------------------------------
Vesta static timing analysis tool
for qflow 1.3.17
(c) 2013-2018 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu05_stdcells"
End of library at line 6606
Parsing module "alu"
Lib read /usr/local/share/qflow/tech/osu050/osu05_stdcells.lib:  Processed 6607 lines.
Verilog netlist read:  Processed 768 lines.
Number of paths analyzed:  0

cat: /home/shamili/shamili_project/rv32i_core/alu/source/alu_tb.v: No such file or directory
--------------------------------
Qflow project setup
--------------------------------

Technology set to osu050 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running qrouter 1.4.59.T
qrouter -noc  -s alu.cfg
